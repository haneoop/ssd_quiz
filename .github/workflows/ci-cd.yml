name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
    
    - name: Run Safety Check (Dependency Vulnerabilities)
      run: safety check
    
    - name: Run Bandit Security Check
      run: bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload Bandit Report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-security-report
        path: bandit-report.json

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: dependency-check
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and start services
      run: |
        docker-compose up -d --build
        sleep 30  # Wait for services to start
    
    - name: Wait for application to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost; do sleep 2; done'
    
    - name: Run Integration Tests
      run: |
        # Test homepage is accessible
        curl -f http://localhost || exit 1
        
        # Test XSS protection
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST -d "search_term=<script>alert('xss')</script>" http://localhost/search)
        if [ $response -ne 302 ]; then echo "XSS test failed"; exit 1; fi
        
        # Test SQL injection protection
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST -d "search_term=' OR 1=1 --" http://localhost/search)
        if [ $response -ne 302 ]; then echo "SQL injection test failed"; exit 1; fi
        
        # Test valid input
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST -d "search_term=hello world" http://localhost/search)
        if [ $response -ne 200 ]; then echo "Valid input test failed"; exit 1; fi
    
    - name: Check MySQL connectivity
      run: |
        docker exec mysqldb mysql -u gitea -ppass -e "SELECT 1;" gitea
    
    - name: Check Git server
      run: |
        docker logs gitserver
        # Test if git daemon is running
        timeout 10 bash -c 'until nc -z localhost 9418; do sleep 1; done'
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  ui-tests:
    name: UI Tests with Selenium
    runs-on: ubuntu-latest
    needs: dependency-check
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install UI test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium pytest pytest-html
        pip install -r requirements.txt
    
    - name: Set up Chrome
      uses: browser-actions/setup-chrome@latest
    
    - name: Set up ChromeDriver
      uses: nanasess/setup-chromedriver@master
    
    - name: Build and start services
      run: |
        docker-compose up -d --build
        sleep 30
    
    - name: Wait for application
      run: |
        timeout 60 bash -c 'until curl -f http://localhost; do sleep 2; done'
    
    - name: Run UI Tests
      run: |
        python -m pytest ui_tests.py -v --html=ui-test-report.html --self-contained-html
    
    - name: Upload UI Test Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ui-test-report
        path: ui-test-report.html
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'